<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>mutex on Avatar&#39;s Blog</title>
    <link>https://ryune911.github.io/tags/mutex/</link>
    <description>Recent content in mutex on Avatar&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sun, 14 Jul 2019 23:21:09 +0800</lastBuildDate><atom:link href="https://ryune911.github.io/tags/mutex/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Redis: 互斥锁</title>
      <link>https://ryune911.github.io/posts/redis-mutex/</link>
      <pubDate>Sun, 14 Jul 2019 23:21:09 +0800</pubDate>
      
      <guid>https://ryune911.github.io/posts/redis-mutex/</guid>
      <description>基于 SETNX
  SETNX: set if not exists 如果不存在，则 SET 成功返回1，失败返回0   v1.0 // 伪代码 获取锁： setnx key value expire key expiration 释放锁： del key  特点：加过期时间避免异常导致锁无法释放的情况 缺点：expire key expiration 执行前异常，依然存在锁无法过期的问题  v1.1 // 伪代码 获取锁： 过期时间戳=当前时间戳+过期时间 setnx key 过期时间戳 如果获取锁失败，则通过 get key 检查该锁的过期时间戳是否已过期 getset key 过期时间戳 修改该锁的过期时间戳为当前过期时间戳 检查 getset 返回的该锁旧的过期时间戳 如果与上一条 get 获取的该锁的过期时间戳相等，则获取锁成功 释放锁： del key  特点：锁未加过期时间 缺点：  并发有可能导致该锁的过期时间戳被不停的覆盖，谁都拿不到锁 获取到锁的进程异常导致未释放，锁的过期时间被其他进程修改，从而延长等待时间    v2.0 // 伪代码 获取锁： setnx key 1 expiration 释放锁： del key  特点：Redis v2.</description>
    </item>
    
  </channel>
</rss>
