<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>互斥锁 on Avatar&#39;s Blog</title>
    <link>https://ryune911.github.io/tags/%E4%BA%92%E6%96%A5%E9%94%81/</link>
    <description>Recent content in 互斥锁 on Avatar&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Fri, 06 Nov 2020 13:21:09 +0800</lastBuildDate><atom:link href="https://ryune911.github.io/tags/%E4%BA%92%E6%96%A5%E9%94%81/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>常用锁的区别及应用场景</title>
      <link>https://ryune911.github.io/posts/lock/</link>
      <pubDate>Fri, 06 Nov 2020 13:21:09 +0800</pubDate>
      
      <guid>https://ryune911.github.io/posts/lock/</guid>
      <description>最基本的锁：互斥锁和自旋锁  互斥锁：未拿到锁，释放 CPU 等待唤醒、线程切换 自旋锁：未拿到锁，忙等待 场景：互斥锁切换线程需要消耗时间与自旋锁加锁的代码的执行时间对比等综合情况来选择  读写锁  读锁：只读操作用读锁加锁 写锁：只写操作用写锁加锁 工作原理  当写锁没有被持有时，多个线程可以并发的持有读锁 当写锁被持有时，读锁、写锁的线程都会阻塞 适合能区分读写操作且多读少写的场景 进化：读优先锁、写优先锁。如果一直有读/写锁，那么写/读锁就会&amp;quot;饿死&amp;quot; 公平读写锁：将获取锁的线程放入队列    乐观锁和悲观锁  乐观锁（无锁编程）：认为出现冲突的几率比较低，先修改资源，再验证是否存在冲突，没有则操作完成、有则放弃本次操作。  如：在线文档多人编辑，如果使用悲观锁，一人编辑时其他用户就无法打开该文档了。 如：git、svn   悲观锁：认为出现冲突的几率比较高，互斥锁、自旋锁、读写锁都是悲观锁。  </description>
    </item>
    
    <item>
      <title>Redis: 互斥锁</title>
      <link>https://ryune911.github.io/posts/redis-mutex/</link>
      <pubDate>Sun, 14 Jul 2019 23:21:09 +0800</pubDate>
      
      <guid>https://ryune911.github.io/posts/redis-mutex/</guid>
      <description>基于 SETNX
  SETNX: set if not exists 如果不存在，则 SET 成功返回1，失败返回0   v1.0 // 伪代码 获取锁： setnx key value expire key expiration 释放锁： del key  特点：加过期时间避免异常导致锁无法释放的情况 缺点：expire key expiration 执行前异常，依然存在锁无法过期的问题  v1.1 // 伪代码 获取锁： 过期时间戳=当前时间戳+过期时间 setnx key 过期时间戳 如果获取锁失败，则通过 get key 检查该锁的过期时间戳是否已过期 getset key 过期时间戳 修改该锁的过期时间戳为当前过期时间戳 检查 getset 返回的该锁旧的过期时间戳 如果与上一条 get 获取的该锁的过期时间戳相等，则获取锁成功 释放锁： del key  特点：锁未加过期时间 缺点：  并发有可能导致该锁的过期时间戳被不停的覆盖，谁都拿不到锁 获取到锁的进程异常导致未释放，锁的过期时间被其他进程修改，从而延长等待时间    v2.0 // 伪代码 获取锁： setnx key 1 expiration 释放锁： del key  特点：Redis v2.</description>
    </item>
    
  </channel>
</rss>
