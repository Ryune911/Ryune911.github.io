<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>gRPC on Avatar&#39;s Blog</title>
    <link>http://blog.ryune.top/tags/grpc/</link>
    <description>Recent content in gRPC on Avatar&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Mon, 05 Aug 2019 15:01:39 +0800</lastBuildDate>
    
	<atom:link href="http://blog.ryune.top/tags/grpc/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>gRPC: 基础</title>
      <link>http://blog.ryune.top/posts/grpc-1/</link>
      <pubDate>Mon, 05 Aug 2019 15:01:39 +0800</pubDate>
      
      <guid>http://blog.ryune.top/posts/grpc-1/</guid>
      <description>概念   gRPC 是一个高性能, 开源和通用的 RPC 框架, 面向移动和 HTTP/2 设计. 目前提供 C, Java 和 Go 语言版本, 分别是：grpc, grpc-java, grpc-go. 其中 C 版本支持 C, C++, Node.js, Python, Ruby, Objective-C, PHP 和 C# 支持. gRPC 基于 HTTP/2 标准设计, 带来诸如双向流, 流控, 头部压缩, 单 TCP 连接上的多复用请求等特. 这些特性使得其在移动设备上表现更好, 更省电和节省空间占用. 未来 Google 的服务都将提供 gRPC 版接口 使用 protocol buffers, 建议使用 proto3   hello wolrd IDL 定义服务  定义方法 SayHello 方法参数 HelloRequest 方法返回 HelloReply  syntax = &amp;quot;proto3&amp;quot;; option java_multiple_files = true; option java_package = &amp;quot;io.</description>
    </item>
    
  </channel>
</rss>