<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>RPC on Avatar&#39;s Blog</title>
    <link>http://blog.ryune.top/tags/rpc/</link>
    <description>Recent content in RPC on Avatar&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Mon, 05 Aug 2019 15:01:39 +0800</lastBuildDate>
    
	<atom:link href="http://blog.ryune.top/tags/rpc/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>gRPC: helloworld </title>
      <link>http://blog.ryune.top/posts/grpc-helloworld/</link>
      <pubDate>Mon, 05 Aug 2019 15:01:39 +0800</pubDate>
      
      <guid>http://blog.ryune.top/posts/grpc-helloworld/</guid>
      <description>概念   gRPC 是一个高性能, 开源和通用的 RPC 框架, 面向移动和 HTTP/2 设计. 目前提供 C, Java 和 Go 语言版本, 分别是：grpc, grpc-java, grpc-go. 其中 C 版本支持 C, C++, Node.js, Python, Ruby, Objective-C, PHP 和 C# 支持. gRPC 基于 HTTP/2 标准设计, 带来诸如双向流, 流控, 头部压缩, 单 TCP 连接上的多复用请求等特. 这些特性使得其在移动设备上表现更好, 更省电和节省空间占用. 未来 Google 的服务都将提供 gRPC 版接口 使用 protocol buffers, 建议使用 proto3   hello wolrd IDL 定义服务  定义方法 SayHello 方法参数 HelloRequest 方法返回 HelloReply  syntax = &amp;quot;proto3&amp;quot;; package helloworld; // The greeting service definition.</description>
    </item>
    
    <item>
      <title>gRPC: service </title>
      <link>http://blog.ryune.top/posts/grpc-service/</link>
      <pubDate>Mon, 05 Aug 2019 15:01:39 +0800</pubDate>
      
      <guid>http://blog.ryune.top/posts/grpc-service/</guid>
      <description>定义服务 gRPC 允许定义4种服务方法 1. 单项 RPC，即客户端发送一个请求给服务端，从服务端获取一个应答，就像一次普通的函数调用。  rpc SayHello(HelloRequest) returns (HelloResponse){ }  2. 服务端流式 RPC，即客户端发送一个请求给服务端，可获取一个数据流用来读取一系列消息。客户端从返回的数据流里一直读取直到没有更多消息为止。  rpc LotsOfReplies(HelloRequest) returns (stream HelloResponse){ }  3. 客户端流式 RPC，即客户端用提供的一个数据流写入并发送一系列消息给服务端。一旦客户端完成消息写入，就等待服务端读取这些消息并返回应答。  rpc LotsOfGreetings(stream HelloRequest) returns (HelloResponse) { }  4. 双向流式 RPC，即两边都可以分别通过一个读写数据流来发送一系列消息。这两个数据流操作是相互独立的，所以客户端和服务端能按其希望的任意顺序读写，例如：服务端可以在写应答前等待所有的客户端消息，或者它可以先读一个消息再写一个消息，或者是读写相结合的其他方式。每个数据流里消息的顺序会被保持。  rpc BidiHello(stream HelloRequest) returns (stream HelloResponse){ } 
单向 RPC   一旦客户端通过桩调用一个方法，服务端会得到相关通知 ，通知包括客户端的元数据，方法名，允许的响应期限（如果可以的话） 服务端既可以在任何响应之前直接发送回初始的元数据，也可以等待客户端的请求信息，到底哪个先发生，取决于具体的应用。 一旦服务端获得客户端的请求信息，就会做所需的任何工作来创建或组装对应的响应。如果成功的话，这个响应会和包含状态码以及可选的状态信息等状态明细及可选的追踪信息返回给客户端 。 假如状态是 OK 的话，客户端会得到应答，这将结束客户端的调用。   服务端流式 RPC   服务端流式 RPC 除了在得到客户端请求信息后发送回一个应答流之外，与我们的简单例子一样。在发送完所有应答后，服务端的状态详情(状态码和可选的状态信息)和可选的跟踪元数据被发送回客户端，以此来完成服务端的工作。客户端在接收到所有服务端的应答后也完成了工作。   客户端流式 RPC   客户端流式 RPC 也基本与我们的简单例子一样，区别在于客户端通过发送一个请求流给服务端，取代了原先发送的单个请求。服务端通常（但并不必须）会在接收到客户端所有的请求后发送回一个应答，其中附带有它的状态详情和可选的跟踪数据。   双向流式 RPC   双向流式 RPC ，调用由客户端调用方法来初始化，而服务端则接收到客户端的元数据，方法名和截止时间。服务端可以选择发送回它的初始元数据或等待客户端发送请求。 下一步怎样发展取决于应用，因为客户端和服务端能在任意顺序上读写 - 这些流的操作是完全独立的。例如服务端可以一直等直到它接收到所有客户端的消息才写应答，或者服务端和客户端可以像&amp;rdquo;乒乓球&amp;rdquo;一样：服务端后得到一个请求就回送一个应答，接着客户端根据应答来发送另一个请求，以此类推。   截止时间   gRPC 允许客户端在调用一个远程方法前指定一个最后期限值。这个值指定了在客户端可以等待服务端多长时间来应答，超过这个时间值 RPC 将结束并返回DEADLINE_EXCEEDED错误。在服务端可以查询这个期限值来看是否一个特定的方法已经过期，或者还剩多长时间来完成这个方法。 各语言来指定一个截止时间的方式是不同的 - 比如在 Python 里一个截止时间值总是必须的，但并不是所有语言都有一个默认的截止时间   RPC 终止   在 gRPC 里，客户端和服务端对调用成功的判断是独立的、本地的，他们的结论可能不一致。这意味着，比如你有一个 RPC 在服务端成功结束(&amp;ldquo;我已经返回了所有应答!</description>
    </item>
    
    <item>
      <title>网络协议：RPC</title>
      <link>http://blog.ryune.top/posts/protocol-2-rpc/</link>
      <pubDate>Fri, 02 Aug 2019 15:01:39 +0800</pubDate>
      
      <guid>http://blog.ryune.top/posts/protocol-2-rpc/</guid>
      <description>概念  RPC：Remote Procedure Call Protocol，远程过程调用。通过网络从远程计算机请求服务，而不需要了解底层网络技术的协议。 PRC 横跨了传输层与应用层 多用于微服务、分布式系统 C/S 模式  原理 &amp;amp; 框架 原理结构  这里 user 就是 client 端，当 user 想发起一个远程调用时，它实际是通过本地调用user-stub。user-stub 负责将调用的接口、方法和参数通过约定的协议规范进行编码并通过本地的 RPCRuntime 实例传输到远端的实例。
远端 RPCRuntime 实例收到请求后交给 server-stub 进行解码后发起本地端调用，调用结果再返回给 user 端。
  User: 发起远程调用 User-stub: 将调用的接口、参数等按照协议编码后交给 client 的 RPCRuntime RPCRuntime: 发送/接收 Server-stub: 将接收到的内容解码后交给 Server Server: 发起本地调用  实现结构  RPC 服务方通过 RpcServer 去导出（export）远程接口方法，而客户方通过 RpcClient 去引入（import）远程接口方法。客户方像调用本地方法一样去调用远程接口方法，RPC 框架提供接口的代理实现，实际的调用将委托给代理RpcProxy 。代理封装调用信息并将调用转交给RpcInvoker 去实际执行。在客户端的RpcInvoker 通过连接器RpcConnector 去维持与服务端的通道RpcChannel，并使用RpcProtocol 执行协议编码（encode）并将编码后的请求消息通过通道发送给服务方。
RPC 服务端接收器 RpcAcceptor 接收客户端的调用请求，同样使用RpcProtocol 执行协议解码（decode）。解码后的调用信息传递给RpcProcessor 去控制处理调用过程，最后再委托调用给RpcInvoker 去实际执行并返回调用结果。如下是各个部分的详细职责：</description>
    </item>
    
  </channel>
</rss>